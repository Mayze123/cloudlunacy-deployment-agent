#!/bin/bash
# ------------------------------------------------------------------------------
# Nixpacks Installation Script for CloudLunacy Deployment Agent
# ------------------------------------------------------------------------------

set -e

# Function for colorized output
log() {
  echo -e "\033[1;32m[INFO]\033[0m $1"
}

log_warn() {
  echo -e "\033[1;33m[WARNING]\033[0m $1"
}

log_error() {
  echo -e "\033[1;31m[ERROR]\033[0m $1"
}

check_root() {
  if [ "$(id -u)" -ne 0 ]; then
    log_warn "This script might need root permissions to install Nixpacks globally."
    log "Try running with sudo if installation fails."
  fi
}

detect_environment() {
  log "Detecting available installation methods..."

  HAS_NPM=false
  HAS_CURL=false
  HAS_BREW=false
  HAS_DOCKER=false

  # Check for npm
  if command -v npm &> /dev/null; then
    HAS_NPM=true
    log "Found npm: $(npm --version)"
  fi

  # Check for curl
  if command -v curl &> /dev/null; then
    HAS_CURL=true
    log "Found curl: $(curl --version | head -n 1)"
  fi

  # Check for brew
  if command -v brew &> /dev/null; then
    HAS_BREW=true
    log "Found Homebrew: $(brew --version)"
  fi

  # Check for docker
  if command -v docker &> /dev/null; then
    HAS_DOCKER=true
    log "Found Docker: $(docker --version)"
  fi
}

install_with_npm() {
  log "Installing Nixpacks using npm..."
  npm install -g nixpacks
}

install_with_curl() {
  log "Installing Nixpacks using the official install script..."
  curl -sSL https://nixpacks.com/install.sh | bash
}

install_with_brew() {
  log "Installing Nixpacks using Homebrew..."
  brew install nixpacks
}

create_docker_wrapper() {
  log "Setting up Docker-based Nixpacks wrapper..."

  # Create wrapper directory if it doesn't exist
  NIXPACKS_WRAPPER_DIR="/usr/local/bin"
  NIXPACKS_WRAPPER_FILE="${NIXPACKS_WRAPPER_DIR}/nixpacks"

  # Create the wrapper script
  cat > "${NIXPACKS_WRAPPER_FILE}" << 'EOF'
#!/bin/sh
# Nixpacks Docker wrapper script
# Generated by CloudLunacy Deployment Agent

NIXPACKS_IMAGE="railwayapp/nixpacks:latest"

# Pull the image silently if it doesn't exist
if ! docker image inspect $NIXPACKS_IMAGE >/dev/null 2>&1; then
  echo "Pulling Nixpacks Docker image (one-time setup)..."
  docker pull $NIXPACKS_IMAGE >/dev/null
fi

# Map the current directory and pass all arguments to the container
exec docker run --rm -v "$(pwd):/workspace" -w "/workspace" $NIXPACKS_IMAGE "$@"
EOF

  # Make the wrapper executable
  chmod +x "${NIXPACKS_WRAPPER_FILE}"

  # Test if the wrapper works
  if nixpacks --version &> /dev/null; then
    log "Nixpacks Docker wrapper installed successfully!"
    return 0
  else
    log_error "Failed to set up Nixpacks Docker wrapper."
    return 1
  fi
}

verify_installation() {
  if command -v nixpacks &> /dev/null; then
    VERSION=$(nixpacks --version)
    log "✅ Nixpacks installed successfully: $VERSION"
    return 0
  else
    log_error "❌ Nixpacks installation verification failed."
    return 1
  fi
}

update_agent_config() {
  ENV_FILE="/opt/cloudlunacy/.env"

  if [ -f "$ENV_FILE" ]; then
    log "Updating agent configuration to use Nixpacks..."

    if grep -q "USE_NIXPACKS" "$ENV_FILE"; then
      # Replace existing setting
      sed -i.bak 's/^USE_NIXPACKS=.*/USE_NIXPACKS=true/' "$ENV_FILE"
      sed -i.bak 's/^NIXPACKS_SKIP_AUTO_INSTALL=.*/NIXPACKS_SKIP_AUTO_INSTALL=true/' "$ENV_FILE"
    else
      # Add new setting
      echo "" >> "$ENV_FILE"
      echo "# Nixpacks configuration" >> "$ENV_FILE"
      echo "USE_NIXPACKS=true" >> "$ENV_FILE"
      echo "NIXPACKS_SKIP_AUTO_INSTALL=true" >> "$ENV_FILE"
    fi

    log "Agent configuration updated."
  else
    log_warn "No agent configuration file found at $ENV_FILE."
    log_warn "Please manually set USE_NIXPACKS=true in your environment."
  fi
}

main() {
  log "CloudLunacy Nixpacks Installer"
  log "------------------------------"

  check_root
  detect_environment

  # Check if Nixpacks is already installed
  if command -v nixpacks &> /dev/null; then
    CURRENT_VERSION=$(nixpacks --version)
    log "Nixpacks is already installed (version: $CURRENT_VERSION)"

    # Ask if user wants to reinstall
    read -p "Do you want to reinstall/update Nixpacks? [y/N] " REINSTALL
    if [[ "$REINSTALL" != "y" && "$REINSTALL" != "Y" ]]; then
      log "Keeping current Nixpacks installation."
      update_agent_config
      exit 0
    fi
  fi

  # Try installation methods in order of preference
  INSTALLED=false

  if [ "$HAS_NPM" = true ] && ! $INSTALLED; then
    log "Attempting installation with npm..."
    if install_with_npm; then
      INSTALLED=true
    else
      log_warn "npm installation failed, trying next method..."
    fi
  fi

  if [ "$HAS_CURL" = true ] && ! $INSTALLED; then
    log "Attempting installation with curl..."
    if install_with_curl; then
      INSTALLED=true
    else
      log_warn "curl installation failed, trying next method..."
    fi
  fi

  if [ "$HAS_BREW" = true ] && ! $INSTALLED; then
    log "Attempting installation with Homebrew..."
    if install_with_brew; then
      INSTALLED=true
    else
      log_warn "brew installation failed, trying next method..."
    fi
  fi

  if [ "$HAS_DOCKER" = true ] && ! $INSTALLED; then
    log "Attempting Docker-based wrapper setup..."
    if create_docker_wrapper; then
      INSTALLED=true
    else
      log_warn "Docker wrapper setup failed."
    fi
  fi

  # Verify installation
  if verify_installation; then
    update_agent_config
    log "Nixpacks installation complete! You can now use Nixpacks for deployments."
    exit 0
  else
    log_error "Failed to install Nixpacks through any method."
    log_error "Please try manual installation from https://nixpacks.com/docs/getting-started"
    exit 1
  fi
}

main "$@"
