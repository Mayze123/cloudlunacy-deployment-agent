FROM node:{{nodeVersion}}-alpine

# Install health check dependencies and common tools
RUN apk add --no-cache wget curl bash nano

# Set working directory
WORKDIR /app

# Install dependencies first (better layer caching)
COPY package*.json ./

{{#if useYarn}}
RUN yarn install --production --frozen-lockfile
{{else if usePnpm}}
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod
{{else}}
RUN npm ci --only=production
{{/if}}

# Copy application code
COPY . .

{{#if buildCommand}}
RUN {{{buildCommand}}}
{{/if}}

# Set up health check endpoint and error handling
RUN echo 'const http = require("http"); \n\
const server = http.createServer((req, res) => { \n\
  if (req.url === "/health") { \n\
    res.writeHead(200); \n\
    res.end("OK"); \n\
  } \n\
}); \n\
server.listen({{containerPort}});' > healthcheck.js

# Create error handling script
RUN echo 'require("dotenv").config(); \n\
process.on("uncaughtException", (error) => { \n\
  console.error("Uncaught Exception:", error); \n\
  process.exit(1); \n\
}); \n\
process.on("unhandledRejection", (reason, promise) => { \n\
  console.error("Unhandled Rejection at:", promise, "reason:", reason); \n\
  process.exit(1); \n\
}); \n\
require("./healthcheck");' > load-env.js

# Create non-root user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE {{containerPort}}

{{#if startCommand}}
CMD ["sh", "-c", "{{{startCommand}}}"]
{{else}}
CMD ["sh", "-c", "node load-env.js & npm start"]
{{/if}}