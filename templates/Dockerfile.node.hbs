FROM node:{{nodeVersion}}-alpine

# Install health check dependencies and common tools
RUN apk add --no-cache wget curl bash nano

# Set working directory
WORKDIR /app

# Install dependencies first (better layer caching)
COPY package*.json ./

{{#if useYarn}}
RUN yarn install --production --frozen-lockfile
{{else if usePnpm}}
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod
{{else}}
RUN npm ci --only=production
{{/if}}

# Copy application code
COPY . .

{{#if buildCommand}}
RUN {{{buildCommand}}}
{{/if}}

# Set up standalone health check server
RUN echo 'const http = require("http");

const server = http.createServer((req, res) => {
  if (req.url === "/health") {
    res.writeHead(200, {"Content-Type": "application/json"});
    res.end(JSON.stringify({ status: "OK" }));
  } else {
    res.writeHead(404);
    res.end();
  }
});

const port = process.env.HEALTH_PORT || 9000;
server.listen(port, () => {
  console.log(`Health check server listening on port ${port}`);
});

// Keep the process running
process.stdin.resume();' > health-server.js

# Create startup script
RUN printf '#!/bin/sh\n\
\n\
# Start health check server in background\n\
node health-server.js &\n\
HEALTH_PID=$!\n\
\n\
# Start the main application\n\
{{#if startCommand}}\n\
{{{startCommand}}} &\n\
{{else}}\n\
npm start &\n\
{{/if}}\n\
MAIN_PID=$!\n\
\n\
# Error handling function\n\
cleanup() {\n\
    echo "Stopping processes..."\n\
    kill $HEALTH_PID $MAIN_PID 2>/dev/null\n\
    exit\n\
}\n\
\n\
# Set up signal handling\n\
trap cleanup INT TERM\n\
\n\
# Wait for either process to exit\n\
wait -n\n\
\n\
# If we get here, one of the processes died\n\
echo "A process exited unexpectedly"\n\
cleanup' > start.sh

RUN chmod +x start.sh

# Create non-root user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE {{containerPort}}
EXPOSE 9000

# Start both servers
CMD ["./start.sh"]