FROM node:{{nodeVersion}}-alpine

# Install health check dependencies and common tools
RUN apk add --no-cache wget curl bash nano

# Set working directory
WORKDIR /app

# Install dependencies first (better layer caching)
COPY package*.json ./

{{#if useYarn}}
RUN yarn install --production --frozen-lockfile
{{else if usePnpm}}
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod
{{else}}
RUN npm ci --only=production
{{/if}}

# Copy application code
COPY . .

{{#if buildCommand}}
RUN {{{buildCommand}}}
{{/if}}

# Set up standalone health check server
RUN printf '%s\n' \
  'const http = require("http");' \
  '' \
  'const server = http.createServer((req, res) => {' \
  '  if (req.url === "/health") {' \
  '    res.writeHead(200, {"Content-Type": "application/json"});' \
  '    res.end(JSON.stringify({ status: "OK" }));' \
  '  } else {' \
  '    res.writeHead(404);' \
  '    res.end();' \
  '  }' \
  '});' \
  '' \
  'const port = process.env.HEALTH_PORT || 9000;' \
  'server.listen(port, () => {' \
  '  console.log(`Health check server listening on port ${port}`);' \
  '});' \
  '' \
  '// Keep the process running' \
  'process.stdin.resume();' > health-server.js

# Create startup script
RUN printf '%s\n' \
  '#!/bin/sh' \
  '' \
  '# Start health check server in background' \
  'node health-server.js &' \
  'HEALTH_PID=$!' \
  '' \
  '# Start the main application' \
  {{#if startCommand}} \
  '{{{startCommand}}} &' \
  {{else}} \
  'npm start &' \
  {{/if}} \
  'MAIN_PID=$!' \
  '' \
  '# Error handling function' \
  'cleanup() {' \
  '    echo "Stopping processes..."' \
  '    kill $HEALTH_PID $MAIN_PID 2>/dev/null' \
  '    exit' \
  '}' \
  '' \
  '# Set up signal handling' \
  'trap cleanup INT TERM' \
  '' \
  '# Wait for either process to exit' \
  'wait -n' \
  '' \
  '# If we get here, one of the processes died' \
  'echo "A process exited unexpectedly"' \
  'cleanup' > start.sh

RUN chmod +x start.sh

# Create non-root user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE {{containerPort}}
EXPOSE 9000

# Start both servers
CMD ["./start.sh"]